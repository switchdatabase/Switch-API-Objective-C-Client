#import <Foundation/Foundation.h>
#import "SWGAddResponse.h"
#import "SWGBody.h"
#import "SWGError.h"
#import "SWGSetResponse.h"
#import "SWGApi.h"

/**
* Switch Database REST API
* Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
*
* OpenAPI spec version: 1.2.1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGDBOperationsApi: NSObject <SWGApi>

extern NSString* kSWGDBOperationsApiErrorDomain;
extern NSInteger kSWGDBOperationsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add is used for adding a data object to the list created at Switch DB.
/// You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It's equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
///
/// @param aPIKey Your Switch API Key.
/// @param accessToken Your Access Token.
/// @param list Your data list name.
/// @param body Your new value JSON.
/// 
///  code:200 message:"Operation Response",
///  code:401 message:"Unauthorized (Given AccessToken parameter is invalid.)",
///  code:403 message:"Security Exception (Unsecured request.)",
///  code:404 message:"Method Not Found (Called API could not found.)",
///  code:429 message:"TooManyRequests (API limit excess. The remaning time to the date-time for that API can answer the requests is calculated as Unix Time format under TheNextReset.)",
///  code:500 message:"ServiceException (Unexpected Error There is a detailed explanation under ErrorMessage.)"
///
/// @return SWGAddResponse*
-(NSURLSessionTask*) addPostWithAPIKey: (NSString*) aPIKey
    accessToken: (NSString*) accessToken
    list: (NSString*) list
    body: (NSString*) body
    completionHandler: (void (^)(SWGAddResponse* output, NSError* error)) handler;


/// It's used for listing a data added before.
/// List parameter sent remarks the list that will be do listing work on at Header. It's equal to SELECT query at relational databases. 
///
/// @param aPIKey Your Switch API Key.
/// @param accessToken Your Access Token.
/// @param list Your data list name.
/// @param body Your Switch DB Query.
/// 
///  code:200 message:"List Item Array",
///  code:401 message:"Unauthorized (Given AccessToken parameter is invalid.)",
///  code:403 message:"Security Exception (Unsecured request.)",
///  code:404 message:"Method Not Found (Called API could not found.)",
///  code:429 message:"TooManyRequests (API limit excess. The remaning time to the date-time for that API can answer the requests is calculated as Unix Time format under TheNextReset.)",
///  code:500 message:"ServiceException (Unexpected Error There is a detailed explanation under ErrorMessage.)"
///
/// @return 
-(NSURLSessionTask*) listPostWithAPIKey: (NSString*) aPIKey
    accessToken: (NSString*) accessToken
    list: (NSString*) list
    body: (SWGBody*) body
    completionHandler: (void (^)(NSError* error)) handler;


/// It's used for deleting a data added before at Switch DB.
/// List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It's equal to DELETE query at relational databases. 
///
/// @param aPIKey Your Switch API Key.
/// @param accessToken Your Access Token.
/// @param list Your data list name.
/// @param listItemId Your list item id.
/// 
///  code:200 message:"Operation Response",
///  code:401 message:"Unauthorized (Given AccessToken parameter is invalid.)",
///  code:403 message:"Security Exception (Unsecured request.)",
///  code:404 message:"Method Not Found (Called API could not found.)",
///  code:429 message:"TooManyRequests (API limit excess. The remaning time to the date-time for that API can answer the requests is calculated as Unix Time format under TheNextReset.)",
///  code:500 message:"ServiceException (Unexpected Error There is a detailed explanation under ErrorMessage.)"
///
/// @return SWGSetResponse*
-(NSURLSessionTask*) setDeleteWithAPIKey: (NSString*) aPIKey
    accessToken: (NSString*) accessToken
    list: (NSString*) list
    listItemId: (NSString*) listItemId
    completionHandler: (void (^)(SWGSetResponse* output, NSError* error)) handler;


/// It's used for updating a data object that is already added to Switch DB.
/// In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \"List\", \"ListItemId\", respectively, as shown in the example below. It's equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
///
/// @param aPIKey Your Switch API Key.
/// @param accessToken Your Access Token.
/// @param list Your data list name.
/// @param listItemId Your list item id.
/// @param body Your new value JSON.
/// 
///  code:200 message:"Operation Response",
///  code:401 message:"Unauthorized (Given AccessToken parameter is invalid.)",
///  code:403 message:"Security Exception (Unsecured request.)",
///  code:404 message:"Method Not Found (Called API could not found.)",
///  code:429 message:"TooManyRequests (API limit excess. The remaning time to the date-time for that API can answer the requests is calculated as Unix Time format under TheNextReset.)",
///  code:500 message:"ServiceException (Unexpected Error There is a detailed explanation under ErrorMessage.)"
///
/// @return SWGSetResponse*
-(NSURLSessionTask*) setPostWithAPIKey: (NSString*) aPIKey
    accessToken: (NSString*) accessToken
    list: (NSString*) list
    listItemId: (NSString*) listItemId
    body: (NSString*) body
    completionHandler: (void (^)(SWGSetResponse* output, NSError* error)) handler;



@end
